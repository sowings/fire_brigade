<form class="formsearch" script="index_overview.js">
  <label>Cross-Host Index Overview</label>

  <searchTemplate>`fb_data_from_today` `_fb_summary_recs($index$)`
| bucket _time span=1d
| eventstats avg(sizeOnDiskMB) AS global_avgBucket
| eval state=mvappend(state, if(endEpoch > now(), "ballast", null()))
| stats
  min(startEpoch) AS startEpoch
  max(endEpoch) AS endEpoch
  sum(sizeOnDiskMB) AS sizeOnDiskMB
  sum(rawSize) AS rawSize
  avg(sizeOnDiskMB) AS avgBucket
  sum(eventCount) AS eventCount
  dc(path) AS buckets
  first(global_avgBucket) AS global_avgBucket
  by orig_host, state, index
| rename orig_host AS host
| join type=left host, index [ `_fb_rest_index_config($index$)`| rename splunk_server AS host | fields host, index, maxTotalDataSizeMB, frozenTimePeriodInSecs, maxDataSize, maxHotBuckets, maxWarmDBCount, homePath.maxDataSizeMB, coldPath.maxDataSizeMB ]
| `_fb_null_hot_cold_max`
  </searchTemplate>

  <fieldset>
    <input type="dropdown" token="index" searchWhenChanged="true">
      <label>Index</label>
      <populatingSearch fieldForValue="orig_index" fieldForLabel="orig_index">| inputlookup fb_hostname_index_cache | dedup orig_index | sort orig_index</populatingSearch>
    </input>
  </fieldset>

  <row>
    <html>
<div id="fire_brigade_help">
This dashboard focuses on a single index, but displays values across the entire deployment. Cumulative values across all hosts are shown as single values, while tables contain per-host summaries.
<p/>
The top row shows
cumulative totals for the various bucket states
across <b>all</b> of the indexers. As in other views, the "Home Usage"
value represents the combination of space consumed by both "hot" and
"warm" buckets, taken together. Remember also that thawed buckets do
not factor into retention policies.
<p/>
The top table, titled <em>Index Size and Capacity by Host</em> presents several quantities per index, in a single-line summary. The columns of data from left to right is intended to flow naturally.
First, 
the raw usage is shown, followed by two ways of calculating the compression. The compression factors (both as a ratio, and as a percentage of the total raw size) necessarily link the total raw size with the on-disk usage for the index. The limit of the raw usage is in the final column, with the percentage of capacity as a bridge between current usage and the configured limit.
<p/>
Below the first table are a series of single value panels again showing cumulative values over all hosts. Shown here are the <em>Total Bucket Count</em>, the <em>Median Bucket Size</em> and the <em>Total Event Count</em>. Note that the event count is given as a snapshot, from the accumulated buckets. A more up-to-date value for this can be obtained from the REST endpoint.
<p/>
Shown on the lower table is information about the bucket totals, as
well as the time span of available events. The line for each host
shows the absolute min and max span of events in the index on that
host. Note that this doesn't indicate whether or not the index is
sparse; it merely shows the <i>earliest</i> and <i>latest</i> events
in the index on that host.
The column titled "Earliest Common Time" represents the earliest time
that <b>all</b> of the hosts can provide.
<p/>
The chart on the bottom is mostly aimed at environments utilizing <i>Index Replication</i>, but can also be useful in environments which do not. In the former case, however, the <i>source host</i> of each slice of index data is shown.
</div>
    </html>
  </row>

  <row grouping="4">
    <single id="index_overview_cumulative_label">
      <option name="link.visible">false</option>
      <option name="field">home</option>
      <option name="underLabel">Home Usage</option>
<!-- need this? | stats max(sizeOnDiskMB) AS sizeOnDiskMB by host, path -->
      <searchPostProcess>search state="hot" OR state="warm"
| stats count, sum(sizeOnDiskMB) AS home | fillnull value=0 home
| `_fb_mbytes_pretty(home)`
      </searchPostProcess>
    </single>
    <single>
      <option name="link.visible">false</option>
      <option name="field">cold</option>
      <option name="underLabel">Cold Usage</option>
      <searchPostProcess>search state="cold"
| stats count, sum(sizeOnDiskMB) AS cold | fillnull value=0 cold
| `_fb_mbytes_pretty(cold)`
      </searchPostProcess>
    </single>
    <single>
      <option name="link.visible">false</option>
      <option name="field">thawed</option>
      <option name="underLabel">Thawed Usage</option>
      <searchPostProcess>search state="thawed"
| stats count, sum(sizeOnDiskMB) AS thawed | fillnull value=0 thawed
| `_fb_mbytes_pretty(thawed)`
      </searchPostProcess>
    </single>
    <single>
      <option name="link.visible">false</option>
      <option name="field">total</option>
      <option name="underLabel">Total Usage</option>
      <searchPostProcess>
search state!="ballast" |
stats count, sum(sizeOnDiskMB) AS total | fillnull value=0 total
| `_fb_mbytes_pretty(total)`
      </searchPostProcess>
    </single>
  </row>

  <row>
    <table>
      <title>Index Size and Capacity by Host</title>
      <option name="link.visible">false</option>
      <option name="drilldown">row</option>
      <searchPostProcess>stats sum(eval(if(state!="ballast", sizeOnDiskMB, 0))) AS sizeOnDiskMB
  sum(rawSize) AS rawSize
  sum(eval(if(state!="thawed", sizeOnDiskMB, 0))) AS ratedUsage
  sum(eval(if(state="ballast", sizeOnDiskMB, 0))) AS ballast
  first(maxTotalDataSizeMB) AS max_limit
  first(homePath.maxDataSizeMB) AS home_limit
  first(coldPath.maxDataSizeMB) AS cold_limit
  by host
| eval rawTotalinMB=rawSize / 1024 / 1024
| eval limit=min(home_limit + cold_limit, max_limit)
| eval percentage=round(ratedUsage * 100 / limit, 1)
| eval diskTotalinMB=sizeOnDiskMB
| `_fb_get_comp_ratio`
| `_fb_get_comp_percent`
| `_fb_mbytes_pretty(sizeOnDiskMB)`
| `_fb_bytes_pretty(rawSize)`
| `_fb_mbytes_pretty(maxTotalDataSizeMB)`
| `_fb_mbytes_pretty(ballast)`
| table host, rawSize, comp_ratio, comp_percent, ballast, sizeOnDiskMB, percentage, limit
| rename
  host AS Host
  sizeOnDiskMB AS "Total Usage"
  ballast AS "Ballast Usage"
  rawSize AS "Total Raw Usage"
  limit AS "Disk Usage Limit"
  comp_ratio AS "Compression Ratio"
  comp_percent AS "Comp. (% of Raw)"
  percentage AS "% of Capacity"
      </searchPostProcess>
      <drilldown>
        <link><![CDATA[
/app/fire_brigade/retention_age?form.host=$row.Host$&form.index=$form.index$]]>
	</link>
      </drilldown>
    </table>
  </row>

  <row>
    <single>
      <title>Total Bucket Count</title>
      <option name="link.visible">false</option>
      <option name="field">buckets</option>
      <searchPostProcess>search state!="ballast" | stats sum(buckets) AS buckets</searchPostProcess>
    </single>
    <single>
      <title>Median Bucket Size</title>
      <option name="link.visible">false</option>
      <option name="field">global_avgBucket</option>
      <searchPostProcess>head 1 | `_fb_mbytes_pretty(global_avgBucket)`</searchPostProcess>
    </single>
    <single>
      <title>Total Event Count</title>
      <option name="link.visible">false</option>
      <option name="field">events</option>
      <searchPostProcess>stats sum(eventCount) AS events | eval events=tostring(events, "commas")</searchPostProcess>
    </single>
  </row>

  <row>
    <table>
      <title>Index Span By Earliest, Latest</title>
      <option name="link.visible">false</option>
      <option name="drilldown">row</option>
      <searchPostProcess>search state!="ballast" 
| stats min(startEpoch) AS startEpoch
  max(endEpoch) AS endEpoch
  sum(eventCount) AS eventCount
  sum(buckets) AS buckets
  first(frozenTimePeriodInSecs) AS frozenTimePeriodInSecs
  by host
| eventstats max(startEpoch) AS cumulativeEpoch
| eval max_span=tostring(now()-startEpoch, "duration")
| eval cutoff_time=now()-frozenTimePeriodInSecs | convert ctime(cutoff_time)
| eval eventCount=tostring(eventCount, "commas")
| convert ctime(*Epoch)
| table host, eventCount, buckets, startEpoch, max_span, cumulativeEpoch, endEpoch, frozenTimePeriodInSecs, cutoff_time
| rename
  host AS Host
  eventCount AS "Total Events"
  buckets AS Buckets
  startEpoch AS "Earliest Event Time"
  cumulativeEpoch AS "Earliest Common Time"
  endEpoch AS "Latest Event Time"
  frozenTimePeriodInSecs AS "Freeze Time Limit"
  cutoff_time AS "Cutoff Time"
  max_span AS "Data Span"
      </searchPostProcess>
      <drilldown>
        <link><![CDATA[
/app/fire_brigade/retention_age?form.host=$row.Host$&form.index=$form.index$]]>
	</link>
      </drilldown>
    </table>
  </row>

  <row>
    <chart>
      <title>Index Usage by Source Indexer</title>
      <option name="link.visible">false</option>
      <option name="charting.chart">column</option>
      <option name="charting.chart.stackMode">stacked</option>
      <option name="charting.axisTitleX.text">Host</option>
      <option name="charting.axisTitleY.text">MBytes</option>
      <searchString>`fb_data_from_today` `_fb_summary_recs($index$)`
| stats max(sizeOnDiskMB) AS sizeOnDiskMB by orig_host, path, guId
| join type=left guId [ | rest /services/server/info | fields - id 
  | rename guid as guId ]
| chart sum(sizeOnDiskMB) AS Total by orig_host, splunk_server
      </searchString>
    </chart>
  </row>

</form>
