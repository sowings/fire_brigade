[monitored_indexes]
filename = monitored_indexes.csv

#### PACKAGING_RULE delete below here for the TA. ####

[fb_extract_bucket_parent]
SOURCE_KEY = path
REGEX = (?<bucket_parent>.+)[\\/]

[fb_extract_hot_bucket]
SOURCE_KEY = path
# This should result in hot, or hot_quar
REGEX = [\\/](?<bucket_type>hot[^\\/]*?)_v\d_(?<bucket_id>\d+)$

[fb_extract_bucket_type_time_source]
SOURCE_KEY = path
REGEX = [\\/](?<bucket_type>rb|db)_(?<bucket_lt>\d+)_(?<bucket_et>\d+)_(?<bucket_id>\d+)(?:_(?<bucket_primary_guid>.+))?$

################################################################
# Field extractions for versions 4.x (more like 4.3.x, but...)
################################################################

# In 5.x, this event has a field "idx" for the index name, and gives
# the terminal directory only as "bucket". In 4.x, we have to use the
# parent path of the bucket directory itself to join against the REST
# /services/data/indexes endpoint to find the right index name. The
# bucket name is present in the event, and captured here.
[fb_four_eks_bucket_kindle_path]
REGEX = bucket\s(?<bucket_parent>.+)[\\/](?<bucket>.*)$

# In 5.x, this event has a LHS giving this field a name of "candidate"
[fb_four_eks_freeze_bucket_path]
REGEX = attempt\sto\sfreeze:\s(?<candidate>.+)\sbecause

[fb_four_eks_bucket_hot_count]
REGEX = (?i)exceeded\smaxHotBuckets\=\d+,\s(?<count>\d+)

[fb_four_eks_bucket_cool_id_parent_name_type]
REGEX = db\swith\sid\sof\s\d+:\s(?<bucket_parent>.+)[\\\\/](?<bucket>.*?)\sto\s

[fb_four_eks_bucket_cool_rolled]
REGEX = (?<rolled>rollHotDb\sexternal\scommand)
FORMAT = isinit::true

[fb_four_eks_bucket_cool_maxHotIdleSecs]
# Yes, this regex anchor is (sic).
REGEX = maxHotIdelSecs\=(?<maxHotIdleSecs>\d+)\[

# The auto KV stuff would normally find this on its own, but those occur
# after REPORT stanzas; we want to have a 'bucket' field from either
# 4.x or 5.x events before hitting the versionless REPORT stanzas from
# props.conf (on the [splunkd] sourcetype).
[fb_five_eks_bucket_kindle_cool_name]
REGEX = (bucket|from)\='?(?<bucket>.+?)[',]?\s

# See above about auto KV--we want the candidate field, but also the parent
# path leading up to it.
# Time-based freeze uses candidate=
# Size-based freeze uses bkt=
[fb_five_eks_bucket_freeze_path_name]
REGEX = (bkt|candidate)\='?(?<bucket_parent>.*)[\\/](?<bucket>[^\\/]+?)'?\s

[fb_bucket_kindle_quar_id]
SOURCE_KEY = bucket
REGEX = hot_(?<qbucket>quar_)?v\d_(?<bucket_id>\d+)$

[fb_bucket_not_kindle_extents_id_primary]
SOURCE_KEY = bucket
REGEX = (r|d)b_(?<bucket_lt>\d+)_(?<bucket_et>\d+)_(?<bucket_id>\d+)(?:_(?<bucket_primary_guid>.+))?$

[fb_bucket_freeze_parent_extents_id]
SOURCE_KEY = candidate
REGEX = ^(?<bucket_parent>.*)[\\/](?<bucket>[^\\/]+_(?<bucket_id>\d+))(?:_(?<bucket_primary_guid>.+))?$

[fb_bucket_BucketMover_transition]
REGEX = (?<transition>warm_to_cold|AsyncFreezer)

[fb_six_eks_BucketMover_max_warm]
REGEX = maximum number of warm databases (?<max_warm>exceeded)

[fb_six_eks_maxHotBucketSize]
# This actually represents the parameter called "maxDataSize", so that's
# what we call the field, instead of the LHS of the pair.
REGEX = _maxHotBucketSize\=(?<maxDataSize>\d+)\s?

[fb_six_eks_bucketSize]
REGEX = bucketSize\=(?<bucketSize>\d+)\s?

# Since we explicitly call some extracts on the stash sourcetype when
# getting data from the summarized capture from dbinspect, we don't want
# to have the default MV_ADD = true, lest we get several copies of the
# fields in the summarized event. For what we're looking for, there's no
# need for MV_ADD.
[stash_extract]
MV_ADD = false

[fb_hostname_index_cache]
filename = fb_hostname_index_cache.csv

[fb_host_groups]
filename = fb_host_groups.csv
min_matches = 2
default_match = All
