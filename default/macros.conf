
[db_inspect_collection(1)]
description = "Have to put a pipe before this macro call, like | `db_inspect_collection(...)`"
args = idx_check
# This renames splunk_server to capture it as the original host.
# The index field will automatically be renamed by the collect mechanism
# (and it does not have to be eval'd, it's part of the output from dbinspect).
definition = dbinspect index=$idx_check$ | rename splunk_server AS orig_host

#### PACKAGING_RULE delete below here for the TA. ####

[fb_rest_indexes_filtered]
description = "Consistent collection of index names (for counting purposes) from the REST API"
definition = rest /services/data/indexes splunk_server=local count=0 | search disabled=0 title!=_blocksignature title!=_thefishbucket | rename title AS index

[_fb_filter_empty_indexes_from_rest]
definition = where totalEventCount > 0

[_fb_dbi_strptime(1)]
args = field
definition = eval $field$=round(strptime($field$, "%m/%d/%Y:%H:%M:%S"), 0)

[_fb_dbi_output_fields]
definition = table index, state, count, earliestTime, latestTime, warmMax, coldMax, maxDataSize, totalUsed, maxTotalMB, diskTotalinMB, rawTotalinMB, comp_ratio, comp_percent

[_fb_get_comp_ratio]
definition = eval comp_ratio=tostring(round(rawTotalinMB / diskTotalinMB, 2)) + "::1"

[_fb_get_comp_percent]
definition = eval comp_percent=tostring(round(diskTotalinMB / rawTotalinMB * 100, 2)) + "%"


[_fb_raw_to_megs]
definition = eval rawTotalinMB=round(rawBytes / 1024 / 1024, 2)

[_fb_dbi_rest_stats_by_index_state]
definition = stats count, min(earliestTime) AS earliestTime, max(latestTime) AS latestTime, first(maxDataSize) AS maxDataSize, first(maxTotalDataSizeMB) AS maxTotalMB, first(coldPath.maxDataSizeMB) AS coldMax, first(homePath.maxDataSizeMB) AS warmMax, sum(rawSize) AS rawBytes, sum(sizeOnDiskMB) AS diskTotalinMB by index, state | eventstats sum(diskTotalinMB) AS totalUsed


# We need to use the /servicesNS/-/- form here to capture *all* of the 
# configs; it may be that configs stored in an app like "_cluster" don't
# show up in the regular invocation.
[_fb_rest_file_config(1)]
args = conf_file
definition = rest /servicesNS/-/-/configs/conf-$conf_file$

[_fb_rest_file_config(2)]
args = conf_file, subsection
definition = rest /servicesNS/-/-/configs/conf-$conf_file$/$subsection$

[_fb_rest_index_config(1)]
args = idx_check
definition = rest /services/data/indexes/$idx_check$ search="disabled=0" | rename title AS index, id, AS rest_api_index_uri

[_fb_rest_index_config(2)]
args = idx_host, idx_check
definition = rest /services/data/indexes/$idx_check$ splunk_server=$idx_host$* count=0 search="disabled=0" | rename title AS index, id AS rest_api_index_uri

[_fb_null_hot_cold_max]
definition = eval coldPath.maxDataSizeMB=if('coldPath.maxDataSizeMB' = 0, null(), 'coldPath.maxDataSizeMB') | eval homePath.maxDataSizeMB=if('homePath.maxDataSizeMB' = 0, null(), 'homePath.maxDataSizeMB')

[_fb_clean_hot_cold_max]
definition = eval coldPath.maxDataSizeMB=if(isnull(coldPath.maxDataSizeMB), "undefined", coldPath.maxDataSizeMB) | eval homePath.maxDataSizeMB=if(isnull(homePath.maxDataSizeMB), "undefined", homePath.maxDataSizeMB)

[__fb_summary_index]
definition = summary

[__fb_summary_recs_base]
definition = index=`__fb_summary_index` source="DB inspection"

[_fb_summary_recs(3)]
args = host_arg, index_arg, bucket_id
validation = validate(isnotnull(bucket_id), "Please provide a bucket ID", isint(bucket_id), "Bucket ID must be a number", bucket_id >= 0, "Bucket ID must be 0 or higher")
definition = `__fb_summary_recs_base` id=$bucket_id$ orig_host=$host_arg$ orig_index=$index_arg$ | rename orig_index AS index

[_fb_summary_recs(2)]
args = host_arg, index_arg
definition = `__fb_summary_recs_base` orig_host=$host_arg$ orig_index=$index_arg$ | rename orig_index AS index

[_fb_summary_recs(1)]
args = index_arg
definition = `__fb_summary_recs_base` orig_index=$index_arg$ | rename orig_index AS index

[_fb_summary_recs_host(1)]
args = host_arg
definition = `__fb_summary_recs_base` orig_host=$host_arg$ | rename orig_index AS index

[fb_bucket_transitions(2)]
args = host_arg, type
iseval = 1
definition = if(type=="kindle", "eventtype=bucket_kindle host=$host_arg$", if(type=="cool", "eventtype=bucket_cool host=$host_arg$", if(type=="chill", "eventtype=bucket_chill host=$host_arg$", if(type=="freeze", "eventtype=bucket_freeze host=$host_arg$", if(type=="minify", "eventtype=bucket_minify host=$host_arg$", "eventtype=bucket_movement host=$host_arg$")))))

[fb_cluster_bucket_transitions(2)]
args = host_arg, type
iseval = 1
definition = if(type=="kindle", "eventtype=bucket_cluster_kindle host=$host_arg$", if(type=="cool", "eventtype=bucket_cluster_cool host=$host_arg$", if(type=="freeze", "eventtype=bucket_cluster_freeze host=$host_arg$", "eventtype=bucket_cluster_movement host=$host_arg$")))

[_fb_bucket_transitions_pretty(2)]
args = host_arg, type
iseval = 1
definition = if(type=="kindle", "eventtype=bucket_kindle host=$host_arg$ | `_fb_bucket_kindle_pp`", if(type=="cool", "eventtype=bucket_cool host=$host_arg$ | `_fb_bucket_cool_pp`", if(type=="chill", "eventtype=bucket_chill host=$host_arg$ | `_fb_bucket_chill_pp`", if(type=="freeze", "eventtype=bucket_freeze host=$host_arg$ | `_fb_bucket_freeze_pp`", if(type=="minify", "(eventtype=bucket_minify)", "(eventtype=bucket_kindle OR eventtype=bucket_cool OR eventtype=bucket_chill OR eventtype=bucket_freeze)")))))

[_fb_bucket_transition]
# Single quotes around field names with . : or space in them lets us do 
# this without first renaming the field.
definition = eval Transition=case('tag::eventtype'=="bucket_cluster_cool", "Hot to Warm (Clustered)", 'tag::eventtype'=="new_hotness", "New Hot", 'tag::eventtype'=="hot_to_warm", "Hot to Warm", 'tag::eventtype'=="warm_to_cold", "Warm to Cold", 'tag::eventtype'=="bucket_freeze", "Freeze", 'tag::eventtype'=="bucket_minify", "Minify", 1==1, "Unknown")

[_fb_bucket_transition_reason]
#isnotnull(rolled), "Restart"
definition = eval Reason=case(to="Complete" AND from="StreamingTarget", "Replica Hot to Warm", to="Complete" AND from="StreamingSource", "Origin Hot to Warm", from="NonStreamingTarget" AND orig_reason="replication success", "Replicated Bucket", event="addBucket" AND status="StreamingSource", "New Hot Bucket (Origin)", event="addBucket" AND status="StreamingTarget", "Streaming Hot Bucket (" . ss . ")", isinit="true", "Restart", isinit="false", "Cluster Restart", count > maxHotBuckets, "Too Many Hot Buckets", diff > maxHotIdleSecs, "Bucket Idle Too Long", bucketSize > maxDataSize, "Bucket Hit Max Size:  " + maxDataSize + " MB", isnotnull(qbucket), "Quarantined event", bucket_age > frozenTimePeriodInSecs, "Bucket Past Age Cutoff", transition="warm_to_cold", "Unknown", currentSize > maxTotalDataSize, "Index Size Exceeded: " + maxTotalDataSize, isnotnull(max_warm), "Too Many Warm Buckets", caller="idle", "Bucket Exceeded Idle Timeout", 'tag::eventtype'=="bucket_minify", "Bucket Passed Minify Age", eventtype=="bucket_volume_chill", "Volume Size Limit Exceeded (homePath)", eventtype="bucket_volume_freeze", "Volume Size Limit Exceeded (coldPath)", 1==1, "New Event")  | eval Reason=if(isnotnull(timestamped), Reason + " at " + timestamped, Reason)

[_fb_bucket_transition_pp_renames]
definition = rename bucket AS "Bucket Name", idx AS Index, bucket_id AS "Bucket ID"

[_fb_bucket_transition_pp_table]
definition = table _time, Host, Index, "Bucket ID", Transition, "Bucket Name", Reason

[fb_bucket_transition_pp]
definition = `_fb_bucket_lifecycle_required_fields` | convert ctime(timestamped) | eval bucket_age=now() - latest | `_fb_bucket_transition` | `_fb_bucket_transition_reason` | `_fb_figure_idx_name_from_home_or_cold_path` | `_fb_bucket_transition_pp_renames` | `_fb_bucket_transition_pp_table`

[_fb_figure_idx_name_from_home_or_cold_path]
definition = eval coldPath_expanded=bucket_parent | join type=left coldPath_expanded [ | rest /services/data/indexes | fields coldPath_expanded, title | rename title AS idx ] | eval homePath_expanded=bucket_parent | join type=left overwrite=f homePath_expanded [ | rest /services/data/indexes | fields homePath_expanded, title | rename title AS idx ] 

[_fb_bytes_pretty(1)]
args = nbytes
definition = eval $nbytes$=$nbytes$ / 1024 / 1024 | `_fb_mbytes_pretty($nbytes$)`

[_fb_mbytes_pretty(1)]
args = field
definition = eval neg=if(tonumber($field$, 10) < 0, 1, 0) | eval $field$=abs($field$) | eval $field$=case($field$ < 1024, tostring(round($field$, 0)) + " MB", $field$ < 1024 * 1024, tostring(round($field$ / 1024, 2)) + " GB", $field$ < 1024 * 1024 * 1024, tostring(round($field$ / 1024 / 1024, 2)) + " TB") | eval $field$=if(neg == 1, "- " + $field$, $field$) | fields - neg

[_fb_where_today]
definition = where _time>=relative_time(now(), "@d")

[_fb_startEpoch_from_earliestTime]
definition = `__fb_coalesce_from_strptime(startEpoch, latestTime)`

[_fb_endEpoch_from_latestTime]
definition = `__fb_coalesce_from_strptime(endEpoch, latestTime)`

[__fb_coalesce_from_strptime(2)]
args = dest_field, src_field
definition = eval $dest_field$=coalesce($dest_field$, round(strptime($src_field$, "%m/%d/%Y:%H:%M:%S")))

[_fb_bucket_lifecycle_index_term(1)]
args = index_arg
iseval = 1
definition = if(index_arg=="*", "", "| search idx=$index_arg$")

[_fb_bucket_lifecycle_required_fields]
# bid bucketPath from "OnlineFsck" (bucket minify)
definition = fields _time host Host bucket timestamped bucket bucket_id bucket_parent idx diff from to size caller isinit maxHotBuckets count candidate frozenTimePeriodInSecs now latest tag::eventtype max_warm currentSize maxTotalDataSize bid bucketPath eventtype ss peer_name status orig_reason event

[_fb_use_or_ignore(2)]
args = key, value
iseval = 1
definition = if(value=="*", "", "$key$=$value$")

[_fb_filter_bucket_movement_to_single_eventtype]
# This sets orig_eventtype from eventtype because ths is expected to be called
# as part of a summary indexing operation. Summary indexing (read: collect) 
# doesn't automatically remap eventtype to orig_eventtype. We save the field
# name right where we want it.
definition = eval orig_eventtype=mvfilter(match(eventtype, "^bucket_(kindle|cool|quarantine_kindle|chill|freeze|minify)$"))

[os_index]
definition = os

[values_or_list(2)]
args = switch, field
iseval = 1
definition = if(switch=="values", "values($field$)", "list($field$)")

[_fb_index_configs_renames_list_only(1)]
args = switch
iseval = 1
definition = if(switch=="values", "rename home_max AS \"Home Path Max Size(s)\", cold_max AS \"Cold Path Max Size(s)\", cold_paths AS \"Cold Path Directory\", home_paths AS \"Home Path Directory\", maxTotalDataSizeMB AS \"Max Total Size(s)\"", "rename home_max AS \"Home Path Max Size (matched)\", cold_max AS \"Cold Path Max Size (matched)\", cold_paths AS \"Cold Path Directory List\", home_paths AS \"Home Path Directory List\", maxTotalDataSizeMB AS \"Max Total Size (matched)\"")

[fb_data_from_today]
definition = earliest=@d
